## Dropper.DownloadFromURL.exe

## File Hash & VT Analysis

92730427321a1c4ccfc0d0580834daef98121efa9bb8963da332bfd6cf1fda8a *Malware.Unknown.exe.malz
1d8562c0adcaee734d63f7baaca02f7c *Malware.Unknown.exe.malz

## Basic Static Analysis

Strings & Floss Output

jjjj
cmd.exe /C ping 1.1.1.1 -n 1 -w 3000 > Nul & Del /f /q "%s"
http://ssl-6582datamanager.helpdeskbros.local/favicon.ico
C:\Users\Public\Documents\CR433101.dat.exe
Mozilla/5.0
ping 1.1.1.1 -n 1 -w 3000 > Nul & C:\Users\Public\Documents\CR433101.dat.exe
open

**IAT & PEView** 

Window API Calls 

- URLDownloadToFileW
- DownloadFromURL
- InternetOpenURLA
- ShellExec

## Basic Dynamic Analysis

Initial Detonation 

~ CMD window, no other indicators. 

- Armed/ denoted the Binary exe to capture the HTTP request over TCP port 80

I was using Wireshark to capture outbound network requests from my Analysis workstation.

I inputted one of the strings extracted from the binary during the static analysis phase(see below). 

### Network Signatures

![Wireshark EXE Capture](network_capture.png)

In the above screenshot, I inputted the filter: http.request.full contains <specified domain> from the static analysis review, to identify the GET request to favicon.io

### Host-Based Indicators

![Proc:Detonation capture](host_capture.png)

Once Favicon.ico is requested CR43301.DAT.EXE is written to the file system

![process name + cmd detail ](host_capture_2.png)

Program Execution Flow: 

If URL exists: 

- Download favicon.io
- Writes to disk:CR433101.dat.exe
- Run favicon.ico:CR433101.dat.exe

If URL doesn’t exit: 

- Delete from disk
- Do not run

#Extra
**Advanced Static Analysis** 

**Things  required for a binary to execute in the x86 architecture** 

~ **CPU Instructions** - Arithmetic instructions, Data Movement Instructions, Control Flow instructions 

Instructions: MOV JMP SUB

~ Memory Registers 

~ Stack 

MOV **Instructions** first//EDX **Destination** comes second // EAX **Source** comes third

**Execution flow**: Move EAX to EDX. 

Note: If you want to move data around while the binary is running. ← use case 

JMP - if you need the program to jump to a certain location or another one. 

Imagine a logical branch. jmp to a memory location(0x00223) ← if something happens or a conditional is met. 

JNZ - jump if not zero 

0 = true 1 =  false 

PUSH 0, STRING, 12 ← TO THE STACK 

POP

Stack

Call 

Ret

ebp

Memory registers 

EAX 

EDX

EBX

ESP

EBP 

EIP

Stack
